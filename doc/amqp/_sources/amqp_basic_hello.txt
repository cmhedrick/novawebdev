..  Copyright (C) Kevin Cole. Permission is granted to copy,
    distribute and/or modify this document under the terms of the GNU
    Free Documentation License, Version 1.3 or any later version
    published by the Free Software Foundation; with no Invariant
    Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of
    the license is included in the section entitled "GNU Free
    Documentation License".

.. index:: amqp, libamqp

send.py
=======

.. code-block:: python

    #!/usr/bin/env python
    # Written by Kevin Cole <kjcole@gallaudet.edu> 2013.09.02
    #
    # Modifying the instructions at
    #
    #    http://www.rabbitmq.com/tutorials/tutorial-one-python.html
    #
    # to work with preinstalled amqp rather than install yet some other
    # random piece to keep track of.
    #
    
    import amqp
    
    connection = amqp.Connection()
    channel = connection.channel()
    channel.queue_declare(queue="hello")
    msg = amqp.Message(body="Hello World!")
    channel.basic_publish(msg, exchange="", routing_key="hello")
    print " [X] Sent 'Hello World!'"
    connection.close()


receive.py
==========

.. code-block:: python

    #!/usr/bin/env python
    # Written by Kevin Cole <kjcole@gallaudet.edu> 2013.09.02
    #
    # Modifying the instructions at
    #
    #    http://www.rabbitmq.com/tutorials/tutorial-one-python.html
    #
    # to work with preinstalled amqp rather than install yet some other
    # random piece to keep track of.
    #
    
    import amqp
    
    def callback(msg):
        print " [X] Received %r" % (msg.body,)
    
    connection = amqp.Connection()
    channel = connection.channel()
    channel.queue_declare(queue="hello")
    print " [*] Waiting for message. To exit press Ctrl-C"
    channel.basic_consume(queue="hello", no_ack=True, callback=callback)
    
    while True:
         channel.wait()
